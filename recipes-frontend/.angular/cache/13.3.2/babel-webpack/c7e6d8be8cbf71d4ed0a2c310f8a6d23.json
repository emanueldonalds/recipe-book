{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./unit.service\";\nexport let RecipeService = /*#__PURE__*/(() => {\n  class RecipeService {\n    constructor(http, unitService) {\n      this.http = http;\n      this.unitService = unitService;\n      this.recipesUrl = environment.apiUri + \"/recipes\"; //TODO this must be configured based on environment\n    }\n\n    getRecipes() {\n      return this.http.get(this.recipesUrl).pipe(map(response => {\n        response.forEach(recipe => {\n          recipe = this.mapRecipe(recipe);\n        });\n        return response;\n      }));\n    }\n\n    getRecipe(id) {\n      return this.http.get(this.recipesUrl + \"/\" + id).pipe(map(response => {\n        return this.mapRecipe(response);\n      }));\n    }\n\n    getRecipeForServings(id, servings) {\n      return this.http.get(this.recipesUrl + \"/\" + id + \"?servings=\" + servings).pipe(map(response => {\n        return this.mapRecipe(response);\n      }));\n    }\n\n    createRecipe(newRecipe) {\n      newRecipe.ingredients.forEach(ingredient => {\n        if (ingredient.quantity && ingredient.quantity.unit) {\n          ingredient.quantity.unit = this.unitService.toUnitKey(ingredient.quantity.unit);\n        }\n      });\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(newRecipe);\n      return this.http.post(this.recipesUrl, body, {\n        'headers': headers\n      });\n    }\n\n    updateRecipe(recipeToUpdate) {\n      recipeToUpdate.ingredients.forEach(ingredient => {\n        if (ingredient.quantity && ingredient.quantity.unit) {\n          ingredient.quantity.unit = this.unitService.toUnitKey(ingredient.quantity.unit);\n        }\n      });\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(recipeToUpdate);\n      return this.http.put(this.recipesUrl + '/' + recipeToUpdate.id, body, {\n        'headers': headers\n      });\n    }\n\n    deleteRecipe(id) {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      return this.http.delete(this.recipesUrl + '/' + id, {\n        'headers': headers\n      });\n    }\n\n    mapRecipe(recipe) {\n      var _a;\n\n      (_a = recipe.ingredients) === null || _a === void 0 ? void 0 : _a.forEach(i => {\n        if (i.quantity && i.quantity.unit) {\n          i.quantity.unit = this.unitService.toUnitValue(i.quantity.unit);\n        }\n      });\n      return recipe;\n    }\n\n  }\n\n  RecipeService.ɵfac = function RecipeService_Factory(t) {\n    return new (t || RecipeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UnitService));\n  };\n\n  RecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipeService,\n    factory: RecipeService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipeService;\n})();","map":null,"metadata":{},"sourceType":"module"}